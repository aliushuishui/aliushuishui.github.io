<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liushuishui.online/"/>
  <updated>2020-01-02T12:31:56.201Z</updated>
  <id>http://liushuishui.online/</id>
  
  <author>
    <name>Martin LIU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vc++</title>
    <link href="http://liushuishui.online/2019/12/23/vc++/"/>
    <id>http://liushuishui.online/2019/12/23/vc++/</id>
    <published>2019-12-23T01:23:20.000Z</published>
    <updated>2020-01-02T12:31:56.201Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/12/24/6vq8tHdDYLpok9A.jpg" alt="1"></p><p>#类和对象</p><p><img src="https://i.loli.net/2019/12/25/zJK5gScktyP9d2H.png" alt="image.png"></p><blockquote><p>访问限定符</p></blockquote><p>1.public</p><p>2.private</p><p>3.protect</p><blockquote><h1 id="inlcude-lt-string-gt-类型"><a href="#inlcude-lt-string-gt-类型" class="headerlink" title="inlcude&lt; string&gt; 类型"></a>inlcude&lt; string&gt; 类型</h1></blockquote><p>s.empty() 判断是否空</p><p>s.size 字符个数</p><p>s1+s2 字符串相接</p><a id="more"></a><blockquote><p>数据封装</p></blockquote><p>用成员函数访问私有元素</p><pre><code>class student{    public:    void setname(string name)    {        m_strname=name;    }    private:    string  m_strname;s    int age;}</code></pre><blockquote><p>构造函数</p></blockquote><ul><li><p>构造函数自动调用，</p></li><li><p>构造函数有多个重载形式</p></li><li><p>当用户没有定义构造函数，自动生成一个构造函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class student</span><br><span class="line">    &#123;</span><br><span class="line">        public:</span><br><span class="line">        student()</span><br><span class="line">        &#123;</span><br><span class="line">            m_strname=name;</span><br><span class="line">        &#125;</span><br><span class="line">        private:</span><br><span class="line">        string  m_strname;s</span><br><span class="line">        int age;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>划了考点，先从考点出发</p><p><img src="https://i.loli.net/2020/01/01/29cF6XZBHwrtxTL.png" alt="考试范围"></p><p><img src="https://i.loli.net/2020/01/01/B89pyGOHaMq3sgS.png" alt="重要知识点"></p><blockquote><p>函数</p></blockquote><p>函数的声明可以不写形参名,只写参数类型,如</p><p>void swap(int <em> px,int </em>  py )</p><p>void swap(int <em> ,int </em> )</p><p>引用:是c++中独具特色的一概念,是一种特殊类型的变量,它是另一个变量的别名,声明一个引用是需要再其名称前加符号&amp;,并同时对引用进行初始话,指定他所引用的对象</p><pre><code>int a=10;int &amp;b=a;b++cout&lt;&lt;a&lt;&lt;b;</code></pre><p>  结果:10 10;</p><blockquote><p>全局变量</p></blockquote><p>在一个多个独立编译的源文件中,可以用全局变量,进行链接,但是 要 加 extern</p><pre><code>extern int a;        </code></pre><blockquote><p>动态内存分配</p></blockquote><p>动态内存分配是只再程序运行是根据当前指令随时为存储数据分屏内存空间,完全程序自己进行内存的分配和释放.   </p><p>c语言中,动态内存分配是使用malloc()和free()实现的,c++中不仅可以使用这些还可以 以用 new和delete</p><pre><code>&lt;指针变量&gt; =new &lt;数据类型&gt; &lt;指针变量&gt; =new &lt;数据类型&gt;[&lt;整型表达式&gt;]&lt;指针变量&gt; =new &lt;数据类型&gt;(&lt;初始值&gt;)                                                              </code></pre><p>面向对象程序设计4个基本特征:抽象,封装,继承,多态.</p><p>继承:是指一个新类可以从已有的类派生而来,新类继承了原有类的特性(属性和行为)</p><p>构造函数自己就调用了.析构函数</p><p>类和对象的区别和联系:</p><p>1.对象是具有类类型的变量。类和对象是面向对象编程技术中的最基本的概念。</p><p>2.类是一个抽象的概念，对象是类的一个具体</p><p>类是一个抽象的概念；<br>而对象是类抽象概念的实物表达</p><p>3.7<br>类的访问控制权限有三种：private  public  protect。私有属性只允许被本类的成员函数访问或者调用。而公有属性可以被本类或者其他类的成员函数访问或者调用（通过接口）。</p><p>3.8<br>构造函数是一种特殊的成员函数，主要用于在创建对象时初始化对象，即为对象的成员变量赋初值。析构函数也是一种特殊的成员函数，是在对象的生存期即将结束前时被系统调用，用来在对象被删除前做一些清理和善后工作。</p><p>3.11<br>this指针是一个特殊的指针，用来指向当前对象。每个非静态成员函数都隐藏有一个this指针的函数参数，当通过一个对象调用成员函数时，编译器要把当前对象的地址传递给this指针。在成员函数中访问数据成员或者调用其他成员函数不需要指定对象，因为是通过一个隐藏的this指针确定当前的对象</p><p>3.12<br>静态成员变量不是某个对象的成员，而是同一类所有对象共享的数据成员，其值对于每个对象都是一样的。静态成员函数也是与一个类相关联而不是与一个特定的对象关联。静态成员可以被初始化，但只能在类体外初始化。静态成员函数必须通过对象名访问非静态成员变量，静态成员函数不能通过this指针访问。静态成员变量没有额外的开销。</p><p>3.18<br>x和y是类的私有成员变量，只能通过类的成员变量进行赋值。应该在创建对象时对二者进行初始化。</p><p>4-7 什么是虚基类？它有什么作用？如何使用虚基类？<br>虚基类是一种派生方式；<br>作用：解决多继承中的二义性问题；<br>采用虚基类方式定义派生类，只需在指定的基类名的前面加上关键字virtual</p><p>4-11 什么是静态联编？什么是动态联编？它们分别在什么情况下被采用？<br>静态联编：是指在编译链接阶段进行的联编，又称早期绑定。<br>动态联编：是指在程序执行阶段进行的联编（以为在编译链接阶段不能确定要调用的函数），又称个后期绑定。</p><p>4-15 析构函数是否可以定义为纯虚函数？如果可以，如何定义纯虚析构函数？<br>可以，把虚构函数声明为纯虚函数，但纯虚析构函数必须要具体的函数实现代码。</p><p>4-17 什么是重载？C++重载分为哪几种？它们之间有什么联系和区别？<br>重载体现了编译时多态，即在函数名（包括运算符）相同的情况下编译器在编译阶段间能够根据不同的函数参数类型确定对应的函数<br>重载包括函数重载和运算符重载。<br>两者实质上是一样的，但是运算符重载比函数重载复杂的多，可以采用普通函数的形式重载运算符，也采用成员函数的形式重载运算符。</p><p>4-28<br>没有使用参数列表显式的调用基类的构造函数给派生类进行初始化。</p><p>4-29<br>类B、类C在继承A时，由于存在同名的函数，导致类C出现了getdata（）函数的多个副本，使在进行输出调用时产生了二义性的问题，应该在进行访问时加上作用域限定符，指明调用的是哪个函数。并将setData（）函数声明为虚函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/24/6vq8tHdDYLpok9A.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;#类和对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/25/zJK5gScktyP9d2H.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;访问限定符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.public&lt;/p&gt;
&lt;p&gt;2.private&lt;/p&gt;
&lt;p&gt;3.protect&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;inlcude-lt-string-gt-类型&quot;&gt;&lt;a href=&quot;#inlcude-lt-string-gt-类型&quot; class=&quot;headerlink&quot; title=&quot;inlcude&amp;lt; string&amp;gt; 类型&quot;&gt;&lt;/a&gt;inlcude&amp;lt; string&amp;gt; 类型&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;s.empty() 判断是否空&lt;/p&gt;
&lt;p&gt;s.size 字符个数&lt;/p&gt;
&lt;p&gt;s1+s2 字符串相接&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构知识点小结</title>
    <link href="http://liushuishui.online/2019/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://liushuishui.online/2019/12/20/数据结构知识点/</id>
    <published>2019-12-20T01:23:20.000Z</published>
    <updated>2019-12-25T15:26:10.688Z</updated>
    
    <content type="html"><![CDATA[<p>#数据结构知识点小结</p><p>1.用链表表示线性表的优点是（便于插入和删除操作）</p><p>2.单链表中，增加头结点的目的是（方便运算的实现）</p><p>3、栈和队列的共同特点是（只允许在端点处插入和删除元素)</p><p>4、栈通常采用的两种存储结构是（线性存储结构和链表存储结构）</p><p>5、队列具有（先进先出）的特征，栈具有（后进先出）的特征。</p><p>6、链表（插入和删除不需要移动元素，但是无法随机访问任一元素）</p><p>7、循环链表的主要优点是（从表中任一结点出发都能访问到整个链表）</p><p>8、线性表（除了第一个和最后一个元素外，其余每个元素都有一个直接前驱和直接后继）</p><p>9、线性表的顺序存储结构和线性表的链式存储结构分别是（随机存取的存储结构、顺序存取的存储结构）</p><p>10、深度为5的满二叉树中，叶子结点的个数为（16）。<img src="https://img-blog.csdn.net/20180623145101514?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODQwMTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="1">其共有（31）个结点。</p><pre><code>设一棵完全二叉树共有699个结点。则该二叉树的叶子结点数为（350）个。       #完全二叉树总的结点数为N，若N为奇数，则叶子结点数为（N+1）/2；若N为偶数，则叶子结点数为N/2。</code></pre><p>11、具有3个结点的二叉树有（5）种形态。 #高度为2层的是：根-左-右。高度为3层的是：根-左-左、根-左-右、根-右-右、根-右-左。</p><p>12、一棵二叉树中有3个叶子结点，有8个度为1的结点，则该二叉树中总的结点数为（13）个。</p><pre><code>#叶子结点数n0与度为2的结点数n2的关系是：n0＝n2＋1，所以度为2的结点个数为3-1=2。所以总的结点数为 n=n0+n1+n2, 8+2+3=13.</code></pre><p>13、已知二叉树的后序遍历序列是dabec,中序遍历序列是debac,它的前序遍历序列是（cedba）。#过程见文章：点击打开链接</p><p>14、已知二叉树的前序遍历序列是abdgcefh,中序遍历序列是dgbaechf,它的前序遍历序列是（gdbehfca）。</p><p>15、算法是指（解决方案的准确而完整的描述）。</p><p>16、算法由（顺序、选择、循环）控制结构组合而成。</p><p>17、算法的时间复杂度是指（算法执行过程中所需要的基本运算次数）。</p><p>18、算法的空间复杂度是指（执行过程中所需要的存储空间）。</p><p>19、算法分析的目的是（分析算法的效率以求改进）。</p><p>20、数据的存储结构是指（数据的逻辑结构在计算机中的表示）。</p><p>21、数据的逻辑结构是指（反映数据元素之间逻辑关系的数据结构）。</p><p>22、根据数据结构中各元素之间前后件关系的复杂程度，可将数据结构分为（线性结构和非线性结构）。</p><p>线性结构一般是首无前驱，尾无后继，中间元素有唯一的前驱和后继。主要有：列表、链表、队列、栈。</p><p>非线性结构主要有1、没有对应关系的 集合。2、一对多关系的 树。3、多对多关系的 图。</p><a id="more"></a><p>23、（队列，循环队列，顺序表）不具有记忆功能，（栈）具有记忆功能。</p><p>24、递归算法一般需要用（栈）来实现。</p><p>  #在递归算法的运行过程中，需要利用栈来保存其运算结果、参数和返回地址等。</p><p>25、算法的五个基本特征是：可行性，确定性，和拥有足够的情报</p><p>有限性：算法在执行有限步后必须终止。</p><p>确定性：算法的每个步骤都需要精确地定义，严格地、无歧义的运行。</p><p>输入：算法在运行之前赋给它的量。</p><p>输出：算法运行结束时的结果。</p><p>可行性：算法原则上能够精准地运行，而且人们用纸和笔做有限次运算后即可完成。</p><p>26、由两个栈共享一个存储空间的好处是（节省存储空间，降低上溢发生的概率）。</p><p>为了不发生上溢错误，就必须给每个栈分配一个足够大的存储空间。但实际中，很难准确地估计，若每个栈都分配过大的存储空间，势必造成系统空间紧张；若让多个栈共用一个足够大的连续存储空间，则可利用栈的动态特性使它们的存储空间互补</p><p>27、需要打印机输出数据时，一般将打印作业放在一个（队列）中。</p><p>28、非空的循环单链表head的尾结点（由 p 所指向） ，满足（p-&gt;next=head ）。</p><p>29、与单链表相比，双向链表的优点是（更容易访问相邻结点）。</p><p>30、<img src="https://img-blog.csdn.net/20180627090753456?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODQwMTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="2"></p><p>31、N个顶点的连通图中边的条数至少为（N-1）条。#将所有顶点连成一条线即可</p><p>32、N个顶点的强连通图中边的条数至少为（N）条。#将所有顶点连成一条圈</p><p>33、对长度为n的线性表进行顺序查找，最坏情况下需要比较（N）次。</p><p>34、最简单的交换排序是（冒泡排序）。</p><p>35、对长度为n的线性表进行顺序冒泡排序，最坏情况下需要比较（n(n-1)/2）次。</p><pre><code>#一共比较n-1遍，第1遍需要比较n-1次，第1遍需要比较n-2次,........最后一遍需要比较1次。是一个等差序列，对其进行求和即可。</code></pre><p>36、在序列基本有序的情况下，效率最高的方法是（A） #如果将插入排序换为冒泡排序，则选冒泡排序</p><pre><code> A．插入排序   B．选择排序   C．快速排序   D．堆排序插入排序通过数据元素的交换来逐步消除线性表中的逆序，所以比较的次数与初始排列次序有关，在待排序的元素序列基本有序的前提下，效率最高。而选择排序和堆排序的比较次数与初始排列次序无关。快速排序虽然与初始排列次序有关，但在待排序的元素序列基本有序的前提下，效率低于插入排序。</code></pre><p>37、希尔排序属于（插入类排序），堆排序属于（选择类排序）。</p><p>38、在下列几种排序方法中，要求内存量最大的是（D）.</p><pre><code>A．插入排序  B．选择排序  C．快速排序  D．归并排序快速排序的基本思想是，通过一趟排序将待排序记录分割成独的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，再分别对这两部分记录继续进行排序，以达到整个序列有序；插入排序的基本操作是指将无序序列中的各元素依次插入到已经有序的线性表中，从而得到一个新的序列；选择排序的基本思想是：扫描整个线性表，从中选出最小的元素，将它交换到表的最前面(这是它应有的位置)，然后对剩下的子表采用同样的方法，直到表空为止；归并排序是将两个或两个以上的有序表组成合成一个新的序列表。</code></pre><p>39、已知数据表 A中每个元素距其最终位置不远，为节省时间， 应采用（直接插入排序）。</p><p>40、数据结构是指相互有关联的( 数据元素 )的集合。</p><p>41、数据元素之间的任何关系都可以用 (前驱和后继) 关系来描述。</p><p>42、顺序存储方法是把逻辑上相邻的结点存储在 (物理位置) 相邻的存储单元中。</p><p>43、栈的基本运算有三种：入栈、退栈与读栈顶元素。</p><p>44、队列主要有两种基本运算：入队和退队。</p><p>45、在实际应用中，带链的栈可以用来收集计算机存储空间中所有空闲的存储结点，这种带链的栈称为 (可利用栈) .</p><p>46、栈和队列通常采用的存储结构分别是 链式存储和顺序存储。</p><p>47、当循环队列非空且队尾指针等于对头指针时， 说明循环队列已满，不能进行入队运算。这种情况称为 (上溢) </p><p>48、当循环队列为空时， 不能进行退队运算， 这种情况称为 (下溢)。</p><p>49、在一个容量为 25 的循环队列中， 若头指针 front=16 ， 尾指针 rear=9 ， 则该循环队列中共有 18 个元素。        注： 当 rear<front 时，="" 元素个数＝总容量－（="" front="" －rear="" ）；="" 当="" rear="">front 时，元素个数＝ rear －front 。</front></p><p>50、判断一个链表是否存在环：点击打开链接</p><pre><code>单链表中元素的反转：点击打开链接判断两个数组中是否有相同的数字：点击打开链接从一个子序列中找出其最大子序列的和：点击打开链接按单词反转字符串：点击打开链接删除数组中重复的元素：点击打开链接</code></pre><p>1、数组和链表的区别</p><pre><code>数组不允许动态地定义其大小，只能够将其定义成足够大小，这样可能会造成空间的浪费。数组在内存中是顺序的存储，可以以O(1)时间查找元素，但是需要O(n)时间插入和删除元素（因为其后面的元素都需要跟着移动）。链表可以动态地定义其大小。其在内存中是链式的存储，访问元素是需要从头开始向后顺序访问，所以需要O(n)时间查找元素；如果在所需位置直接插入或删除元素，需要O(1)时间，如果在需要先找到所需位置再插入或删除元素，需要O(n)时间。</code></pre><p>2、链表的基本操作：反转，是否存在环，循环链表点击打开链接和双向链表点击打开链接的查找、插入、删除操作。</p><p>3、栈的入栈和出栈：点击打开链接，队列的入队和出队：点击打开链接</p><p>4、二叉树的基础知识：点击打开链接及其三种遍历（递归和非递归实现）：点击打开链接</p><p>5、图的基础知识：点击打开链接</p><p>6、常用散列函数和冲突消解机制：点击打开链接</p><p>7、排序算法中基本的冒泡排序、选择排序、插入排序需要很快地用代码实现。堆排序、归并排序、快速排序需要掌握其主要思想，并熟悉常用排序算法的时间和空间复杂度，及其应用范围：</p><pre><code>(1) 当数据规模较小时，直接采用直接插入排序或直接选择排序。(2) 当数据已经基本有序时，可以用直接插入排序或冒泡排序。(3) 当数据规模较大时，可以用快速排序。当记录随机分布时，快速排序的平均时间最短。当最坏情况时，其时间复杂度为O(n2)，空间复杂度为O(n)。 (4) 堆排序所需的辅助空间比快排少，但这两种方法都不稳定。 (5) 归并排序既可以用于内部排序，也可以用于外部排序，是一种稳定的算法。</code></pre><p>8、能熟练写出二分查找的程序。</p><p>9、熟悉算法的思想：贪心算法，动态规划，分治算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#数据结构知识点小结&lt;/p&gt;
&lt;p&gt;1.用链表表示线性表的优点是（便于插入和删除操作）&lt;/p&gt;
&lt;p&gt;2.单链表中，增加头结点的目的是（方便运算的实现）&lt;/p&gt;
&lt;p&gt;3、栈和队列的共同特点是（只允许在端点处插入和删除元素)&lt;/p&gt;
&lt;p&gt;4、栈通常采用的两种存储结构是（线性存储结构和链表存储结构）&lt;/p&gt;
&lt;p&gt;5、队列具有（先进先出）的特征，栈具有（后进先出）的特征。&lt;/p&gt;
&lt;p&gt;6、链表（插入和删除不需要移动元素，但是无法随机访问任一元素）&lt;/p&gt;
&lt;p&gt;7、循环链表的主要优点是（从表中任一结点出发都能访问到整个链表）&lt;/p&gt;
&lt;p&gt;8、线性表（除了第一个和最后一个元素外，其余每个元素都有一个直接前驱和直接后继）&lt;/p&gt;
&lt;p&gt;9、线性表的顺序存储结构和线性表的链式存储结构分别是（随机存取的存储结构、顺序存取的存储结构）&lt;/p&gt;
&lt;p&gt;10、深度为5的满二叉树中，叶子结点的个数为（16）。&lt;img src=&quot;https://img-blog.csdn.net/20180623145101514?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODQwMTI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;1&quot;&gt;其共有（31）个结点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;设一棵完全二叉树共有699个结点。则该二叉树的叶子结点数为（350）个。 

      #完全二叉树总的结点数为N，若N为奇数，则叶子结点数为（N+1）/2；若N为偶数，则叶子结点数为N/2。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;11、具有3个结点的二叉树有（5）种形态。 #高度为2层的是：根-左-右。高度为3层的是：根-左-左、根-左-右、根-右-右、根-右-左。&lt;/p&gt;
&lt;p&gt;12、一棵二叉树中有3个叶子结点，有8个度为1的结点，则该二叉树中总的结点数为（13）个。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#叶子结点数n0与度为2的结点数n2的关系是：n0＝n2＋1，所以度为2的结点个数为3-1=2。所以总的结点数为 n=n0+n1+n2, 8+2+3=13.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;13、已知二叉树的后序遍历序列是dabec,中序遍历序列是debac,它的前序遍历序列是（cedba）。#过程见文章：点击打开链接&lt;/p&gt;
&lt;p&gt;14、已知二叉树的前序遍历序列是abdgcefh,中序遍历序列是dgbaechf,它的前序遍历序列是（gdbehfca）。&lt;/p&gt;
&lt;p&gt;15、算法是指（解决方案的准确而完整的描述）。&lt;/p&gt;
&lt;p&gt;16、算法由（顺序、选择、循环）控制结构组合而成。&lt;/p&gt;
&lt;p&gt;17、算法的时间复杂度是指（算法执行过程中所需要的基本运算次数）。&lt;/p&gt;
&lt;p&gt;18、算法的空间复杂度是指（执行过程中所需要的存储空间）。&lt;/p&gt;
&lt;p&gt;19、算法分析的目的是（分析算法的效率以求改进）。&lt;/p&gt;
&lt;p&gt;20、数据的存储结构是指（数据的逻辑结构在计算机中的表示）。&lt;/p&gt;
&lt;p&gt;21、数据的逻辑结构是指（反映数据元素之间逻辑关系的数据结构）。&lt;/p&gt;
&lt;p&gt;22、根据数据结构中各元素之间前后件关系的复杂程度，可将数据结构分为（线性结构和非线性结构）。&lt;/p&gt;
&lt;p&gt;线性结构一般是首无前驱，尾无后继，中间元素有唯一的前驱和后继。主要有：列表、链表、队列、栈。&lt;/p&gt;
&lt;p&gt;非线性结构主要有1、没有对应关系的 集合。2、一对多关系的 树。3、多对多关系的 图。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重生</title>
    <link href="http://liushuishui.online/2019/06/07/%E5%AD%A6%E4%B9%A0/"/>
    <id>http://liushuishui.online/2019/06/07/学习/</id>
    <published>2019-06-07T01:23:20.000Z</published>
    <updated>2019-09-25T03:45:50.071Z</updated>
    
    <content type="html"><![CDATA[<p>重生</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重生&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>近期JS学习</title>
    <link href="http://liushuishui.online/2019/03/01/JS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://liushuishui.online/2019/03/01/JS学习/</id>
    <published>2019-03-01T01:23:20.000Z</published>
    <updated>2019-09-25T03:47:35.319Z</updated>
    
    <content type="html"><![CDATA[<p>从菜鸟教程看，借图书看，最后在mooc看总算有点收获，javascript入门篇：（<a href="https://www.imooc.com/learn/36）；" target="_blank" rel="noopener">https://www.imooc.com/learn/36）；</a><br>进阶篇：(<a href="https://www.imooc.com/learn/10)。" target="_blank" rel="noopener">https://www.imooc.com/learn/10)。</a><br> 慢慢来吧,冲冲冲.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从菜鸟教程看，借图书看，最后在mooc看总算有点收获，javascript入门篇：（&lt;a href=&quot;https://www.imooc.com/learn/36）；&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.imooc.com
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>流水账 2019.1</title>
    <link href="http://liushuishui.online/2019/01/31/%E6%B5%81%E6%B0%B4%E8%B4%A62019.1/"/>
    <id>http://liushuishui.online/2019/01/31/流水账2019.1/</id>
    <published>2019-01-31T04:13:20.000Z</published>
    <updated>2020-01-29T09:02:26.553Z</updated>
    
    <content type="html"><![CDATA[<p>有时候不喜欢发朋友圈，感觉有点矫情，毕竟不是所有人的能感同身受的，所以年初立个flag，也要记录记录生活，有趣的事还是很多的，那就开始做呗，回顾一个月以来的照片和突发写在备忘录的感受。不能让照片永远沉在相册中，想法消失在脑海里。。。</p><pre><code>2019.1.5</code></pre><p><img src="https://i.loli.net/2019/12/31/Ecb6RgVAFPsIKo8.jpg" alt="1"></p><p>忍不住又看了一集，1988</p><p><img src="https://i.loli.net/2019/12/31/9xTfa5gWQyPAkC7.jpg" alt="2"></p><p>看完在舍友的呼噜声中又一次睡不着了，随机到了lemon，想到了一些高中生活。</p><pre><code>2019.1.14</code></pre><p>考完试了，又去逛了一下宽窄巷子，这次于上次不同，人少了很多，真的历史的文化也显现出<br>来，只可惜被这充满利益的时代来利用，成为一些人的‘摇钱树’。不可否认的是这其中的价值是<br>非常之大的，但这样下去这些历史文物终究是会损耗殆尽的，但不想世人展示，其实的精神价<br>值又很难感染世人。 下图的 绘在墙上的”毛主席语录” 我个人揣测为文革时期后的产物。<br>提醒着人们，不能一味的崇拜一个人，要学会多角度看问题，</p><p><img src="https://i.loli.net/2019/12/31/t9iDQrC6BHXokSP.jpg" alt="3"></p><pre><code>2019.1.16</code></pre><p>和朋友一起去成都动物园逛了逛，票价便宜，人少，而且动物也多，如果不是特别想看熊猫的话，成都动物园，我觉得比熊猫基地性价比搞很多。</p><p><img src="https://i.loli.net/2019/12/31/TZtrAmlNep6Pf43.jpg" alt="4"></p><p><img src="https://i.loli.net/2019/12/31/UDxRHuFOMQKd6P8.jpg" alt="5"></p><p><img src="https://i.loli.net/2019/12/31/POErMBy4sAgQaKl.jpg" alt="6"></p><pre><code>2019.1.17</code></pre><p>经验还是不足，为了求稳，前一天晚上早早就到了机场通宵</p><p><img src="https://i.loli.net/2019/12/31/kIm7lCVGsnAjt9H.jpg" alt="7"></p><p><img src="https://i.loli.net/2019/12/31/aDXHbdujNpEPeWk.jpg" alt="8"></p><p><img src="https://i.loli.net/2019/12/31/7IS24yBZfuvh5Dw.jpg" alt="9"></p><p>到了温州，再坐动车到福安，坐上了高中熟悉的福安-寿宁</p><p>爸来接我了<br><img src="https://i.loli.net/2019/12/31/K8wYEHJrNq6fa1M.jpg" alt="10"></p><pre><code>2019.1.22</code></pre><p>回家好舒服阿，还收到了哥带回来的礼物</p><p><img src="https://i.loli.net/2019/12/31/S5WY4uUR1KFTsbx.jpg" alt="11"></p><p>随便写写，以后随便看看也别有一番滋味。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候不喜欢发朋友圈，感觉有点矫情，毕竟不是所有人的能感同身受的，所以年初立个flag，也要记录记录生活，有趣的事还是很多的，那就开始做呗，回顾一个月以来的照片和突发写在备忘录的感受。不能让照片永远沉在相册中，想法消失在脑海里。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2019.
      
    
    </summary>
    
      <category term="流水账" scheme="http://liushuishui.online/categories/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://liushuishui.online/2019/01/01/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://liushuishui.online/2019/01/01/markdown语法/</id>
    <published>2019-01-01T01:23:20.000Z</published>
    <updated>2019-12-23T15:16:22.352Z</updated>
    
    <content type="html"><![CDATA[<p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p><p>使用 = 和 - 标记一级和二级标题</p><p>使用 # 号标记</p><p>段落的换行是使用两个以上空格加上回车。  </p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong>  </p><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西</p><hr><hr><hr><hr><hr><p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del><br>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><p>[^要注明的文本]</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：  </p><p>列表嵌套<br>列表嵌套只需在子列表中的选项添加四个空格即可：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><p>Markdown 区块<br>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><p><a href="链接地址">链接名称</a></p><p>或者</p><p>&lt;链接地址&gt;</p><p>Markdown 表格<br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码区块使用 4 个空格或者一个制表符（Tab 键）。&lt;/p&gt;
&lt;p&gt;使用 = 和 - 标记一级和二级标题&lt;/p&gt;
&lt;p&gt;使用 # 号标记&lt;/p&gt;
&lt;p&gt;段落的换行是使用两个以上空格加上回车。  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;斜体文本&lt;/em&gt;&lt;br&gt;&lt;em&gt;斜体文本&lt;/em&gt;&lt;
      
    
    </summary>
    
      <category term="Markdown" scheme="http://liushuishui.online/categories/Markdown/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML初识</title>
    <link href="http://liushuishui.online/2018/11/12/%E5%85%B3%E4%BA%8EHTML%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://liushuishui.online/2018/11/12/关于HTML近期学习/</id>
    <published>2018-11-12T01:23:20.000Z</published>
    <updated>2019-09-26T12:55:19.803Z</updated>
    
    <content type="html"><![CDATA[<p>超文本标记语言，标准通用标记语言下的一个应用。<br>“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。<br>超文本标记语言的结构包括“头”部分（英语：Head）、和“主体”部分（英语：Body），其中“头”部提供关于网页的信息，“主体”部分提供网页的具体内容。<br>近期学习网站：(<a href="https://www.bilibili.com/video/av10298843" target="_blank" rel="noopener">https://www.bilibili.com/video/av10298843</a>)<br>1.静态网页与动态网页的区别<br>静态网页，动态网页主要根据网页制作的语言来区分：<br>静态网页使用语言：HTML（超文本标记语言）<br>动态网页使用语言：HTML+ASP或HTML+PHP或HTML+JSP等<br>还可以从url上区分：<br>静态网页使用url：都以html为结尾<br>动态网页使用url：动态的url中基本带有“？”号<br>程序是否在服务器端运行，是重要标志。在服务器端运行的程序、网页、组件，属于动态网页，它们会随不同客户、不同时间，返回不同的网页，例如ASP、PHP、JSP、 CGI等。运行于客户端的程序、网页、插件、组件，属于静态网页，例如html页、Flash、JavaScript、VBScript等等，它们是永远不变的。<br>静态网页和动态网页各有特点，网站采用动态网页还是静态网页主要取决于网站的功能需求和网站内容的多少，如果网站功能比较简单，内容更新量不是很大，采用纯静态网页的方式会更简单，反之一般要采用动态网页技术来实现。<br>静态网页是网站建设的基础，静态网页和动态网页之间也并不矛盾，为了网站适应搜索引擎检索的需要，即使采用动态网站技术，也可以将网页内容转化为静态网页发布。<br>动态网站也可以采用静动结合的原则，适合采用动态网页的地方用动态网页，如果必要使用静态网页，则可以考虑用静态网页的方法来实现，在同一个网站上，动态网页内容和静态网页内容同时存在也是很常见的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;超文本标记语言，标准通用标记语言下的一个应用。&lt;br&gt;“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。&lt;br&gt;超文本标记语言的结构包括“头”部分（英语：Head）、和“主体”部分（英语：Body），其中“头”部提供关于网页的信息，“主体”部分提供网页的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liushuishui.online/2018/11/01/Hello/"/>
    <id>http://liushuishui.online/2018/11/01/Hello/</id>
    <published>2018-11-01T05:30:19.047Z</published>
    <updated>2019-12-25T15:26:50.622Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
